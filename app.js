// Generated by Haxe 4.0.0-rc.3
(function ($global) { "use strict";
var App = function(size,circleSize,strokeStyle,speed,clockwise) {
	if(clockwise == null) {
		clockwise = true;
	}
	if(speed == null) {
		speed = 1.0;
	}
	if(strokeStyle == null) {
		strokeStyle = "#000";
	}
	if(circleSize == null) {
		circleSize = 16;
	}
	this.clockwise = true;
	this.circleSize = 16;
	this.speed = 1.0;
	this.size = size;
	this.circleSize = circleSize;
	this.speed = speed;
	this.clockwise = clockwise;
	this.height = size / 2 * Math.sqrt(3) | 0;
	var _g = [];
	_g.push({ x : 0, y : 0});
	_g.push({ x : 0, y : 0});
	_g.push({ x : 0, y : 0});
	_g.push({ x : 0, y : 0});
	_g.push({ x : 0, y : 0});
	_g.push({ x : 0, y : 0});
	this.points = _g;
	this.rotation = 0.0;
	this.offsetX = 0;
	this.offsetY = circleSize;
	this.canvas = window.document.createElement("canvas");
	this.canvas.width = size;
	this.canvas.height = size;
	this.context = this.canvas.getContext("2d",null);
	this.context.strokeStyle = strokeStyle;
};
App.step = function(time) {
	window.requestAnimationFrame(App.step);
	App.tetroid.update();
	App.tetroid.draw();
};
App.main = function() {
	window.onload = function(_) {
		App.tetroid = new App(300,14,"#fff");
		window.document.body.appendChild(App.tetroid.canvas);
		window.requestAnimationFrame(App.step);
		window.document.body.onclick = function(_1) {
			App.tetroid.clockwise = !App.tetroid.clockwise;
		};
	};
};
App.prototype = {
	update: function() {
		var rad = this.rotation * Math.PI / 180;
		var rot = rad;
		this.points[0].x = Math.cos(rot) * this.circleSize;
		this.points[0].y = Math.sin(rot) * this.circleSize;
		rot = rad + Math.PI * 2 / 3;
		this.points[2].x = Math.cos(rot) * this.circleSize + this.size - this.circleSize * 2;
		this.points[2].y = Math.sin(rot) * this.circleSize;
		rot = rad + Math.PI * 2 / 3 * 2;
		this.points[4].x = Math.cos(rot) * this.circleSize + this.size / 2;
		this.points[4].y = Math.sin(rot) * this.circleSize + this.height - this.circleSize;
		this.points[1].x = -this.points[0].x;
		this.points[1].y = -this.points[0].y;
		rot = rad + Math.PI * 2 / 3;
		this.points[3].x = -Math.cos(rot) * this.circleSize + this.size - this.circleSize * 2;
		this.points[3].y = -Math.sin(rot) * this.circleSize;
		rot = rad + Math.PI * 2 / 3 * 2;
		this.points[5].x = -Math.cos(rot) * this.circleSize + this.size / 2;
		this.points[5].y = -Math.sin(rot) * this.circleSize + this.height - this.circleSize;
	}
	,draw: function() {
		this.context.clearRect(0,0,window.innerWidth,window.innerHeight);
		this.context.save();
		this.context.translate(this.circleSize,this.circleSize);
		this.context.beginPath();
		this.context.moveTo(this.offsetX + this.points[0].x,this.offsetY + this.points[0].y);
		this.context.lineTo(this.offsetX + this.points[2].x,this.offsetY + this.points[2].y);
		this.context.lineTo(this.offsetX + this.points[4].x,this.offsetY + this.points[4].y);
		this.context.lineTo(this.offsetX + this.points[1].x,this.offsetY + this.points[1].y);
		this.context.lineTo(this.offsetX + this.points[3].x,this.offsetY + this.points[3].y);
		this.context.lineTo(this.offsetX + this.points[5].x,this.offsetY + this.points[5].y);
		this.context.lineTo(this.offsetX + this.points[0].x,this.offsetY + this.points[0].y);
		this.context.stroke();
		this.context.restore();
		if(this.clockwise) {
			this.rotation += this.speed;
			if(this.rotation >= 360) {
				this.rotation = 0;
			}
		} else {
			this.rotation -= this.speed;
			if(this.rotation <= 0) {
				this.rotation = 360;
			}
		}
	}
};
App.main();
})({});

//# sourceMappingURL=app.js.map